{
  "components": {
    "schemas": {
      ".flows": {
        "properties": {
          "default": {
            "description": "Reference to the ID of the sequence flow node which acts as the default path.",
            "type": "string"
          },
          "incoming": {
            "description": "References to the IDs of the sequence flow nodes inbound to the gateway.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "outgoing": {
            "description": "References to the IDs of the sequence flow nodes outbound from the gateway.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "incoming",
          "outgoing"
        ]
      },
      "activities.ActivityExtField": {
        "properties": {
          "description": {
            "description": "Description for the field.",
            "type": "string"
          },
          "display": {
            "description": "User friendly display name for the field",
            "type": "string"
          },
          "example": {
            "$ref": "#/components/schemas/activities.ActivityExtField.example"
          },
          "fields": {
            "description": "Nested fields of this object, only set when field type is complex",
            "items": {
              "$ref": "#/components/schemas/activities.ActivityExtField"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the field as it should be passed back to the API through conditions or data mapping.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/fielddata.FieldSource"
          },
          "type": {
            "description": "Underlying type for the field, can be a primitive json schema type or signal field type.",
            "type": "string"
          },
          "x-cs-not-parameterizable": {
            "description": "This property is set if the notPramaterizable is set to true.",
            "type": "boolean"
          }
        },
        "required": [
          "display",
          "name"
        ]
      },
      "activities.ActivityExtField.example": {},
      "api.MessageCenterActivityResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/messages.Activity"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.MessageCenterAttachmentUploadResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/messages.Attachment"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "api.MessageCenterCasesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/messages.Case"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "detects.ExternalAlert": {
        "properties": {
          "agent_id": {
            "description": "Device or sensor ID for which the Alert was generated",
            "type": "string"
          },
          "aggregate_id": {
            "description": "Common linkage between multiple Alerts that belong to the same detection bouquet",
            "type": "string"
          },
          "assigned_to_name": {
            "description": "Name of the person this Alert is assigned to",
            "type": "string"
          },
          "assigned_to_uid": {
            "description": "UserID to which this Alert is assigned to",
            "type": "string"
          },
          "assigned_to_uuid": {
            "description": "UUID to which this Alert is assigned to",
            "type": "string"
          },
          "cid": {
            "description": "Unique ID of CrowdStrike customers",
            "type": "string"
          },
          "composite_id": {
            "description": "An opaque internal identifier that can uniquely identify an Alert",
            "type": "string"
          },
          "confidence": {
            "description": "Confidence is a 1-100 integer value denoting the confidence that, when this Alert fires, it is indicative of malicious activity",
            "format": "integer",
            "type": "integer"
          },
          "crawled_timestamp": {
            "description": "indicates when ThreatGraph was crawled to gather info for this alert creation/update",
            "format": "date-time",
            "type": "string"
          },
          "created_timestamp": {
            "description": "indicates when the Alert was first written to backend store",
            "format": "date-time",
            "type": "string"
          },
          "data_domains": {
            "description": "Data Domains represents domains to which this alert belongs to",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "Short, customer-visible summary of the detected activity",
            "type": "string"
          },
          "display_name": {
            "description": "Customer visible name for the Alert's pattern",
            "type": "string"
          },
          "email_sent": {
            "description": "Boolean to know if we sent email regarding this Alert",
            "type": "boolean"
          },
          "external": {
            "description": "Boolean indicating if this Alert is internal or external",
            "type": "boolean"
          },
          "id": {
            "description": "Vertex key which triggers the formation of the Alert",
            "type": "string"
          },
          "linked_case_ids": {
            "description": "Linked Case Ids are cases that are associated with this alert",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mitre_attack": {
            "description": "References to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
            "items": {
              "properties": {
                "pattern_id": {
                  "description": "Pattern ID for the pattern seen in the Alert",
                  "format": "integer",
                  "type": "integer"
                },
                "tactic": {
                  "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
                  "type": "string"
                },
                "tactic_id": {
                  "description": "Unique ID for the tactic seen in the Alert",
                  "type": "string"
                },
                "technique": {
                  "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
                  "type": "string"
                },
                "technique_id": {
                  "description": "Unique ID for the technique seen in the Alert",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "name": {
            "description": "Pattern Name coming either from Taxonomy or directly from the ingested Alert",
            "type": "string"
          },
          "objective": {
            "description": "End goal that an attack adversary intends to achieve according to MITRE",
            "type": "string"
          },
          "pattern_id": {
            "description": "Taxonomy patternID for this Alert",
            "format": "integer",
            "type": "integer"
          },
          "platform": {
            "description": "Platform that this Alert was triggered on e.g. Android, Windows, etc..",
            "type": "string"
          },
          "product": {
            "description": "Product specifies the SKU that this Alert belongs to e.g. mobile, idp, epp",
            "type": "string"
          },
          "resolution": {
            "description": "Alert resolution. Could be one of the following values: true_positive, false_positive, ignored",
            "type": "string"
          },
          "scenario": {
            "description": "Scenario was used pre-Handrails to display additional killchain context for UI alerts. With handrails, this field is mostly  obsolete in favor of tactic/technique. Still, it can be useful for determining specific pattern types that are not straightforward to distinguish from other fields alone",
            "type": "string"
          },
          "seconds_to_resolved": {
            "description": "Seconds To Resolved represents the seconds elapsed since this alert has been resolved",
            "format": "int64",
            "type": "integer"
          },
          "seconds_to_triaged": {
            "description": "Seconds To Triage represents the seconds elapsed since this alert has been triaged",
            "format": "int64",
            "type": "integer"
          },
          "severity": {
            "description": "Severity is also a 1-100 integer value, but unlike confidence severity impacts how a Alert is displayed in the UI",
            "format": "integer",
            "type": "integer"
          },
          "severity_name": {
            "description": "Severity name is a UI friendly bucketing of the severity integer",
            "type": "string"
          },
          "show_in_ui": {
            "description": "Boolean indicating if this Alert will be shown in the UI or if it's hidden'",
            "type": "boolean"
          },
          "source_products": {
            "description": "Source Products are products that produced events which contributed to this alert",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source_vendors": {
            "description": "Source Vendors are vendors that produced events which contributed to this alert",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "Could be one of the following - New, closed, in_progress, reopened",
            "type": "string"
          },
          "tactic": {
            "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
            "type": "string"
          },
          "tactic_id": {
            "description": "Unique ID for the tactic seen in the Alert",
            "type": "string"
          },
          "tags": {
            "description": "Tags are string values associated with the alert that can be added or removed through the API",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "technique": {
            "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
            "type": "string"
          },
          "technique_id": {
            "description": "Unique ID for the technique seen in the Alert",
            "type": "string"
          },
          "timestamp": {
            "description": "stored value coming in directly from the ingested event or set by cloud in the absence of it",
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "description": "Type of definition Detections Extensibility use. Keyed-off of Pattern of the incoming events/Alerts",
            "type": "string"
          },
          "updated_timestamp": {
            "description": "indicates when the Alert was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "aggregate_id",
          "assigned_to_name",
          "assigned_to_uid",
          "assigned_to_uuid",
          "cid",
          "composite_id",
          "confidence",
          "crawled_timestamp",
          "created_timestamp",
          "data_domains",
          "description",
          "display_name",
          "email_sent",
          "external",
          "id",
          "linked_case_ids",
          "mitre_attack",
          "name",
          "objective",
          "pattern_id",
          "platform",
          "product",
          "resolution",
          "scenario",
          "seconds_to_resolved",
          "seconds_to_triaged",
          "severity",
          "severity_name",
          "show_in_ui",
          "source_products",
          "source_vendors",
          "status",
          "tactic",
          "tactic_id",
          "tags",
          "technique",
          "technique_id",
          "timestamp",
          "type",
          "updated_timestamp"
        ]
      },
      "detects.MitreAttackMapping": {
        "properties": {
          "pattern_id": {
            "description": "Pattern ID for the pattern seen in the Alert",
            "format": "integer",
            "type": "integer"
          },
          "tactic": {
            "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
            "type": "string"
          },
          "tactic_id": {
            "description": "Unique ID for the tactic seen in the Alert",
            "type": "string"
          },
          "technique": {
            "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
            "type": "string"
          },
          "technique_id": {
            "description": "Unique ID for the technique seen in the Alert",
            "type": "string"
          }
        }
      },
      "detectsapi.AggregateAlertQueryRequest": {
        "properties": {
          "date_ranges": {
            "description": "DateRanges applies to date_range aggregations.",
            "items": {
              "$ref": "#/components/schemas/msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "description": "Exclude Post-filtering on queried fields",
            "type": "string"
          },
          "field": {
            "description": "Field applies for example to date_histogram and range aggregations.",
            "type": "string"
          },
          "filter": {
            "description": "FQL query specifying the filter parameters.",
            "type": "string"
          },
          "from": {
            "description": "used in bucket sort aggregations as an offset",
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "description": "Include Post-filtering on queried fields",
            "type": "string"
          },
          "interval": {
            "description": "Interval applies for example to date_histogram aggregations (uses calendar_interval). Possible values: year, month, week, day, hour, minute.",
            "type": "string"
          },
          "max_doc_count": {
            "description": "only return terms that match less than a configured number of hits.",
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "description": "only return terms that match more than a configured number of hits.",
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "description": "Missing is a value for missing term field. The behavior that query should return if the document does not have the field in the query",
            "type": "string"
          },
          "name": {
            "description": "Name of the aggregate query",
            "type": "string"
          },
          "q": {
            "description": "represents full text query",
            "type": "string"
          },
          "ranges": {
            "description": "Ranges applies to range aggregations.",
            "items": {
              "$ref": "#/components/schemas/msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "description": "how many term buckets should be returned.",
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "description": "Sort spec, ex: 'pattern_id|desc'.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "sub aggregate alert query.",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregateAlertQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "description": "TimeZone timezone to specify when bucketing results.",
            "type": "string"
          },
          "type": {
            "description": "Datastore supported value types: term, terms, date_histogram, facet, range, cardinality. Exact allowed values specific to endpoint.",
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "detectsapi.AggregatesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "collection of aggregate query results",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResult"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.AggregationResult": {
        "properties": {
          "buckets": {
            "description": "collection of aggregate results matching the criteria",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResultItem"
            },
            "type": "array"
          },
          "name": {
            "description": "aggregate query name as provided in the request",
            "type": "string"
          },
          "sum_other_doc_count": {
            "description": "sum of the document counts for all buckets that are not part of the response",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "detectsapi.AggregationResultItem": {
        "properties": {
          "count": {
            "description": "total count of items falling in this bucket",
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "description": "used to determine the start of the range in aggregations",
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "description": "the formatted string version using the format parameter specification",
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/detectsapi.AggregationResultItem.label"
          },
          "string_from": {
            "description": "string representation of 'From' date",
            "type": "string"
          },
          "string_to": {
            "description": "string representation of 'To' date",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "nested aggregation result",
            "items": {
              "$ref": "#/components/schemas/detectsapi.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "description": "used to determine end of the range in aggregations",
            "format": "double",
            "type": "number"
          },
          "value": {
            "description": "numeric aggregations (Min, Max, Avg, Percentile...)",
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "description": "string representation of Value",
            "type": "string"
          }
        },
        "required": [
          "count"
        ]
      },
      "detectsapi.AggregationResultItem.label": {},
      "detectsapi.AlertQueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Array of the Alerts requested",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.PatchEntitiesAlertsV2Request": {
        "properties": {
          "action_parameters": {
            "items": {
              "$ref": "#/components/schemas/msaspec.ActionParameter"
            },
            "type": "array"
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "detectsapi.PatchEntitiesAlertsV3Request": {
        "properties": {
          "action_parameters": {
            "items": {
              "$ref": "#/components/schemas/msaspec.ActionParameter"
            },
            "type": "array"
          },
          "composite_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "composite_ids"
        ]
      },
      "detectsapi.PostCombinedAlertsV1Meta": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "detectsapi.PostCombinedAlertsV1Paging": {
        "properties": {
          "after": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "total"
        ]
      },
      "detectsapi.PostCombinedAlertsV1RequestSwagger": {
        "properties": {
          "after": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          }
        }
      },
      "detectsapi.PostCombinedAlertsV1ResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1Meta"
          },
          "resources": {
            "description": "Resources represent the slice of Alerts that were retrieved",
            "items": {
              "$ref": "#/components/schemas/detects.ExternalAlert"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "detectsapi.PostEntitiesAlertsV1Request": {
        "properties": {
          "ids": {
            "description": "IDs represent the slice of Alert IDs that would be looked up",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "detectsapi.PostEntitiesAlertsV1ResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "description": "Resources represent the slice of Alerts that were retrieved for the given Alert IDs",
            "items": {
              "$ref": "#/components/schemas/detects.ExternalAlert"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.PostEntitiesAlertsV2Request": {
        "properties": {
          "composite_ids": {
            "description": "CompositeIDs represent the slice of Alert CompositeIDs that would be looked up",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "composite_ids"
        ]
      },
      "detectsapi.PostEntitiesAlertsV2ResponseSwagger": {
        "properties": {
          "errors": {
            "items": {
              "properties": {
                "code": {
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "type": "array"
          },
          "meta": {
            "properties": {
              "pagination": {
                "properties": {
                  "limit": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "offset": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "total": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "limit",
                  "offset",
                  "total"
                ]
              },
              "powered_by": {
                "type": "string"
              },
              "query_time": {
                "format": "double",
                "type": "number"
              },
              "trace_id": {
                "type": "string"
              },
              "writes": {
                "properties": {
                  "resources_affected": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "resources_affected"
                ]
              }
            },
            "required": [
              "query_time",
              "trace_id"
            ]
          },
          "resources": {
            "description": "Resources represent the slice of Alerts that were retrieved for the given Alert IDs",
            "items": {
              "properties": {
                "agent_id": {
                  "description": "Device or sensor ID for which the Alert was generated",
                  "type": "string"
                },
                "aggregate_id": {
                  "description": "Common linkage between multiple Alerts that belong to the same detection bouquet",
                  "type": "string"
                },
                "assigned_to_name": {
                  "description": "Name of the person this Alert is assigned to",
                  "type": "string"
                },
                "assigned_to_uid": {
                  "description": "UserID to which this Alert is assigned to",
                  "type": "string"
                },
                "assigned_to_uuid": {
                  "description": "UUID to which this Alert is assigned to",
                  "type": "string"
                },
                "cid": {
                  "description": "Unique ID of CrowdStrike customers",
                  "type": "string"
                },
                "composite_id": {
                  "description": "An opaque internal identifier that can uniquely identify an Alert",
                  "type": "string"
                },
                "confidence": {
                  "description": "Confidence is a 1-100 integer value denoting the confidence that, when this Alert fires, it is indicative of malicious activity",
                  "format": "integer",
                  "type": "integer"
                },
                "crawled_timestamp": {
                  "description": "indicates when ThreatGraph was crawled to gather info for this alert creation/update",
                  "format": "date-time",
                  "type": "string"
                },
                "created_timestamp": {
                  "description": "indicates when the Alert was first written to backend store",
                  "format": "date-time",
                  "type": "string"
                },
                "data_domains": {
                  "description": "Data Domains represents domains to which this alert belongs to",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "Short, customer-visible summary of the detected activity",
                  "type": "string"
                },
                "display_name": {
                  "description": "Customer visible name for the Alert's pattern",
                  "type": "string"
                },
                "email_sent": {
                  "description": "Boolean to know if we sent email regarding this Alert",
                  "type": "boolean"
                },
                "external": {
                  "description": "Boolean indicating if this Alert is internal or external",
                  "type": "boolean"
                },
                "id": {
                  "description": "Vertex key which triggers the formation of the Alert",
                  "type": "string"
                },
                "linked_case_ids": {
                  "description": "Linked Case Ids are cases that are associated with this alert",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "mitre_attack": {
                  "description": "References to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
                  "items": {
                    "properties": {
                      "pattern_id": {
                        "description": "Pattern ID for the pattern seen in the Alert",
                        "format": "integer",
                        "type": "integer"
                      },
                      "tactic": {
                        "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
                        "type": "string"
                      },
                      "tactic_id": {
                        "description": "Unique ID for the tactic seen in the Alert",
                        "type": "string"
                      },
                      "technique": {
                        "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
                        "type": "string"
                      },
                      "technique_id": {
                        "description": "Unique ID for the technique seen in the Alert",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Pattern Name coming either from Taxonomy or directly from the ingested Alert",
                  "type": "string"
                },
                "objective": {
                  "description": "End goal that an attack adversary intends to achieve according to MITRE",
                  "type": "string"
                },
                "pattern_id": {
                  "description": "Taxonomy patternID for this Alert",
                  "format": "integer",
                  "type": "integer"
                },
                "platform": {
                  "description": "Platform that this Alert was triggered on e.g. Android, Windows, etc..",
                  "type": "string"
                },
                "product": {
                  "description": "Product specifies the SKU that this Alert belongs to e.g. mobile, idp, epp",
                  "type": "string"
                },
                "resolution": {
                  "description": "Alert resolution. Could be one of the following values: true_positive, false_positive, ignored",
                  "type": "string"
                },
                "scenario": {
                  "description": "Scenario was used pre-Handrails to display additional killchain context for UI alerts. With handrails, this field is mostly  obsolete in favor of tactic/technique. Still, it can be useful for determining specific pattern types that are not straightforward to distinguish from other fields alone",
                  "type": "string"
                },
                "seconds_to_resolved": {
                  "description": "Seconds To Resolved represents the seconds elapsed since this alert has been resolved",
                  "format": "int64",
                  "type": "integer"
                },
                "seconds_to_triaged": {
                  "description": "Seconds To Triage represents the seconds elapsed since this alert has been triaged",
                  "format": "int64",
                  "type": "integer"
                },
                "severity": {
                  "description": "Severity is also a 1-100 integer value, but unlike confidence severity impacts how a Alert is displayed in the UI",
                  "format": "integer",
                  "type": "integer"
                },
                "severity_name": {
                  "description": "Severity name is a UI friendly bucketing of the severity integer",
                  "type": "string"
                },
                "show_in_ui": {
                  "description": "Boolean indicating if this Alert will be shown in the UI or if it's hidden'",
                  "type": "boolean"
                },
                "source_products": {
                  "description": "Source Products are products that produced events which contributed to this alert",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "source_vendors": {
                  "description": "Source Vendors are vendors that produced events which contributed to this alert",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Could be one of the following - New, closed, in_progress, reopened",
                  "type": "string"
                },
                "tactic": {
                  "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
                  "type": "string"
                },
                "tactic_id": {
                  "description": "Unique ID for the tactic seen in the Alert",
                  "type": "string"
                },
                "tags": {
                  "description": "Tags are string values associated with the alert that can be added or removed through the API",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "technique": {
                  "description": "Tactic and Technique are references to MITRE ATT\u0026CK, which is a public framework for tracking and modeling adversary tools techniques and procedures",
                  "type": "string"
                },
                "technique_id": {
                  "description": "Unique ID for the technique seen in the Alert",
                  "type": "string"
                },
                "timestamp": {
                  "description": "stored value coming in directly from the ingested event or set by cloud in the absence of it",
                  "format": "date-time",
                  "type": "string"
                },
                "type": {
                  "description": "Type of definition Detections Extensibility use. Keyed-off of Pattern of the incoming events/Alerts",
                  "type": "string"
                },
                "updated_timestamp": {
                  "description": "indicates when the Alert was last modified",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "required": [
                "agent_id",
                "aggregate_id",
                "assigned_to_name",
                "assigned_to_uid",
                "assigned_to_uuid",
                "cid",
                "composite_id",
                "confidence",
                "crawled_timestamp",
                "created_timestamp",
                "data_domains",
                "description",
                "display_name",
                "email_sent",
                "external",
                "id",
                "linked_case_ids",
                "mitre_attack",
                "name",
                "objective",
                "pattern_id",
                "platform",
                "product",
                "resolution",
                "scenario",
                "seconds_to_resolved",
                "seconds_to_triaged",
                "severity",
                "severity_name",
                "show_in_ui",
                "source_products",
                "source_vendors",
                "status",
                "tactic",
                "tactic_id",
                "tags",
                "technique",
                "technique_id",
                "timestamp",
                "type",
                "updated_timestamp"
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "detectsapi.ResponseFields": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "domain.ActivityCreationRequest": {
        "properties": {
          "body": {
            "type": "string"
          },
          "case_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "case_id",
          "type",
          "user_uuid"
        ]
      },
      "domain.CaseCreationRequestV2": {
        "properties": {
          "body": {
            "type": "string"
          },
          "detections": {
            "items": {
              "$ref": "#/components/schemas/messages.Alert"
            },
            "type": "array"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/messages.Incident"
            },
            "type": "array"
          },
          "malware_submission_id": {
            "type": "string"
          },
          "recon_rule_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "detections",
          "incidents",
          "malware_submission_id",
          "recon_rule_type",
          "title",
          "type"
        ]
      },
      "domain.ScriptHelp": {
        "properties": {
          "args": {
            "items": {
              "$ref": "#/components/schemas/model.Argument"
            },
            "type": "array"
          },
          "command": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "examples": {
            "type": "string"
          },
          "internal_only": {
            "type": "boolean"
          },
          "runnable": {
            "type": "boolean"
          },
          "sub_commands": {
            "items": {
              "$ref": "#/components/schemas/domain.ScriptHelp"
            },
            "type": "array"
          }
        },
        "required": [
          "args",
          "command",
          "description",
          "examples",
          "internal_only",
          "runnable",
          "sub_commands"
        ]
      },
      "fielddata.FieldSource": {
        "properties": {
          "case_sensitive": {
            "description": "Indicates whether the field is case sensitive for searching against fulcrum. Some downstream APIs are and others are not, so this is needed so that UI can handle this cohesively.",
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/fielddata.FieldSourceOption"
            },
            "type": "array"
          },
          "sort": {
            "type": "string"
          },
          "strict": {
            "type": "boolean"
          }
        },
        "required": [
          "strict"
        ]
      },
      "fielddata.FieldSourceOption": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/fielddata.FieldSourceOption.id"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "fielddata.FieldSourceOption.id": {},
      "fwmgr.msa.AggregateQueryRequest": {
        "properties": {
          "date_ranges": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "type": "string"
          },
          "extended_bounds": {
            "$ref": "#/components/schemas/fwmgr.msa.ExtendedBoundsSpec"
          },
          "field": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          },
          "max_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregateQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "fwmgr.msa.AggregationResult": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregationResultItem"
            },
            "type": "array"
          },
          "doc_count_error_upper_bound": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "sum_other_doc_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "fwmgr.msa.AggregationResultItem": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/fwmgr.msa.AggregationResultItem.label"
          },
          "string_from": {
            "type": "string"
          },
          "string_to": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/fwmgr.msa.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "format": "double",
            "type": "number"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "type": "string"
          }
        },
        "required": [
          "count"
        ]
      },
      "fwmgr.msa.AggregationResultItem.label": {},
      "fwmgr.msa.DateRangeSpec": {
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "fwmgr.msa.ExtendedBoundsSpec": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          }
        },
        "required": [
          "max",
          "min"
        ]
      },
      "fwmgr.msa.RangeSpec": {
        "properties": {
          "From": {
            "format": "double",
            "type": "number"
          },
          "To": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "From",
          "To"
        ]
      },
      "graph.Condition": {
        "properties": {
          "cel_expression": {
            "description": "CEL expression for the condition, should evaluate to a boolean.",
            "type": "string"
          },
          "display": {
            "description": "User friendly description of the expression. This is generally supplied by the UI/caller.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expression": {
            "description": "FQL expression for the condition on the sequence flow.",
            "type": "string"
          }
        }
      },
      "graph.ConfiguredActivity": {
        "properties": {
          "class": {
            "description": "The class of activity. If undefined it is an ActivityClassDefault",
            "type": "string"
          },
          "flows": {
            "$ref": "#/components/schemas/.flows"
          },
          "id": {
            "description": "The unique identifier of the selected activity that is being configured.",
            "type": "string"
          },
          "inline_configuration": {
            "$ref": "#/components/schemas/graph.InlineActivityConfig"
          },
          "max_seconds": {
            "description": "Maximum seconds to wait for an async process to finish. Overrides default async_max_seconds on Activity seed.",
            "type": "string"
          },
          "name": {
            "description": "Optional user provided name for the activity, if not specified a default of the name for that Activity will be used.",
            "type": "string"
          },
          "nodeID": {
            "type": "string"
          },
          "properties": {
            "description": "Dynamic payload providing values needed to configure the activity for execution. The structure of this data is dictated by the JSON Schema defined for the selected Activity.",
            "type": "object"
          },
          "version_constraint": {
            "description": "Semantic version constraint of the activity, can be an explicit version or a version constraint. If unspecified the latest activity \u003c= 1.0.0 is used.",
            "type": "string"
          }
        },
        "required": [
          "flows",
          "id",
          "name",
          "nodeID",
          "properties"
        ]
      },
      "graph.ConfiguredTrigger": {
        "properties": {
          "id": {
            "description": "Unique identifier for the selected trigger as provided by the triggers API",
            "type": "string"
          },
          "name": {
            "description": "Display name of the trigger",
            "type": "string"
          },
          "nodeID": {
            "type": "string"
          },
          "outgoing_flow": {
            "description": "Reference to the ID of the flow node outbound from the trigger.",
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "timer_event_definition": {
            "$ref": "#/components/schemas/graph.TimerEventDefinition"
          },
          "trigger_type": {
            "description": "Denotes the type of trigger, signal based, scheduled, on demand, etc",
            "type": "string"
          },
          "version_constraint": {
            "description": "Semantic version constraint of the trigger, it can be an explicit version or a version constraint. If unspecified the evaluator will use the latest version \u003c= 1.0.0",
            "type": "string"
          },
          "webhook_config": {
            "$ref": "#/components/schemas/webhooktrigger.APIRequest"
          }
        },
        "required": [
          "name",
          "nodeID",
          "outgoing_flow"
        ]
      },
      "graph.DefinitionModel": {
        "properties": {
          "activities": {
            "description": "Details of all the activities within the model. Each activity has a unique node ID as the key, that is set by the caller.",
            "type": "object"
          },
          "end": {
            "$ref": "#/components/schemas/graph.End"
          },
          "flows": {
            "description": "Details all the sequence flows within the model. Each flow has a unique node ID as the key, that is set by the caller.",
            "type": "object"
          },
          "gateways": {
            "description": "Details all the gateways within the model. Each gateway has a unique node ID as the key, that is set by the caller.",
            "type": "object"
          },
          "nodeRegistry": {
            "type": "object"
          },
          "sub_models": {
            "description": "Details of all sub-models within the model. Each sub-model has a unique node ID as the key set by the caller.",
            "type": "object"
          },
          "trigger": {
            "$ref": "#/components/schemas/graph.ConfiguredTrigger"
          }
        },
        "required": [
          "flows",
          "nodeRegistry",
          "trigger"
        ]
      },
      "graph.End": {
        "properties": {
          "incoming_flows": {
            "description": "Reference to the ID of the flow nodes inbound to the end node.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "nodeID": {
            "type": "string"
          },
          "output_fields": {
            "description": "Keys of the fields that are the output for this model",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "summary": {
            "description": "Summary of the workflow is free form text with possibly embedded variables",
            "type": "string"
          }
        },
        "required": [
          "incoming_flows",
          "nodeID"
        ]
      },
      "graph.Flow": {
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/graph.Condition"
          },
          "source": {
            "description": "Reference to the ID of the node that is the source of the flow.",
            "type": "string"
          },
          "source_alias": {
            "description": "Alias for the source of the flow.",
            "type": "string"
          },
          "target": {
            "description": "Reference to the ID of the node that is the target of the flow.",
            "type": "string"
          }
        },
        "required": [
          "source",
          "target"
        ]
      },
      "graph.Gateway": {
        "properties": {
          "flows": {
            "$ref": "#/components/schemas/.flows"
          },
          "nodeID": {
            "type": "string"
          },
          "type": {
            "description": "The type of gateway being specified, allowed values are; exclusive, inclusive and parallel.",
            "type": "string"
          }
        },
        "required": [
          "flows",
          "nodeID",
          "type"
        ]
      },
      "graph.InlineActivityConfig": {
        "properties": {
          "config": {
            "description": "A map containing an activity configuration for an inline action.",
            "type": "object"
          },
          "input_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "output_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          }
        }
      },
      "graph.Multi": {
        "properties": {
          "array_field": {
            "description": "Name of the field that contains the array in input data",
            "type": "string"
          },
          "array_field_display_name": {
            "description": "Display name of the field that contains the array in input data",
            "type": "string"
          },
          "condition": {
            "$ref": "#/components/schemas/graph.Condition"
          },
          "continue_on_partial_execution": {
            "description": "If true will allow the workflow to continue execution even if some loop iterations fail or when there are no iterations to execute",
            "type": "boolean"
          },
          "max_execution_seconds": {
            "description": "Maximum number of seconds the submodel will run for, if this is exceeded no new iterations will run. If unset a default value is used during execution",
            "format": "int32",
            "type": "integer"
          },
          "max_iteration_count": {
            "description": "Maximum number of iterations allowed in sub model",
            "format": "int32",
            "type": "integer"
          },
          "sequential": {
            "description": "Indicates the loop will run sequentially",
            "type": "boolean"
          }
        },
        "required": [
          "array_field",
          "array_field_display_name",
          "continue_on_partial_execution",
          "max_execution_seconds",
          "max_iteration_count"
        ]
      },
      "graph.SubModel": {
        "properties": {
          "flows": {
            "$ref": "#/components/schemas/.flows"
          },
          "model": {
            "$ref": "#/components/schemas/graph.DefinitionModel"
          },
          "multi": {
            "$ref": "#/components/schemas/graph.Multi"
          },
          "name": {
            "description": "Optional user provided name for the submodel.",
            "type": "string"
          },
          "nodeID": {
            "type": "string"
          }
        },
        "required": [
          "flows",
          "model",
          "multi",
          "nodeID"
        ]
      },
      "graph.TimerEventDefinition": {
        "properties": {
          "end_date": {
            "description": "End date in mm-dd-yyyy format",
            "type": "string"
          },
          "skip_concurrent": {
            "description": "Flag indicating if concurrent execution of scheduled workflow should be skipped or not",
            "type": "boolean"
          },
          "start_date": {
            "description": "Start date in mm-dd-yyyy format",
            "type": "string"
          },
          "time_cycle": {
            "description": "A time cycle element specifies repeating intervals, and can be specified using using cron expressions.",
            "type": "string"
          },
          "tz": {
            "description": "Timezone label from IANA timezone database, for example, America/Los_Angeles",
            "type": "string"
          }
        },
        "required": [
          "skip_concurrent",
          "time_cycle",
          "tz"
        ]
      },
      "jsonschema.Authorization": {
        "properties": {
          "apiScope": {
            "type": "string"
          },
          "complexPermissions": {
            "$ref": "#/components/schemas/jsonschema.ComplexPermissions"
          },
          "featureFlag": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.Permission"
            },
            "type": "array"
          }
        },
        "required": [
          "complexPermissions",
          "featureFlag",
          "permissions"
        ]
      },
      "jsonschema.CollectionIndexField": {
        "properties": {
          "field": {
            "type": "string"
          },
          "fql_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "field",
          "fql_name",
          "type"
        ]
      },
      "jsonschema.ComplexPermissions": {
        "properties": {
          "OR": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.ComplexPermissions.OR"
            },
            "type": "array"
          }
        }
      },
      "jsonschema.ComplexPermissions.OR": {
        "properties": {
          "AND": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.Permission"
            },
            "type": "array"
          }
        }
      },
      "jsonschema.ConditionGroupFields": {
        "properties": {
          "condition_control": {
            "type": "boolean"
          },
          "control_name": {
            "type": "string"
          },
          "controller": {
            "type": "boolean"
          },
          "dependent_control": {
            "type": "string"
          },
          "ignore_meta": {
            "type": "boolean"
          },
          "requires_meta": {
            "type": "string"
          },
          "reset_fields": {
            "$ref": "#/components/schemas/jsonschema.ResetFields"
          }
        }
      },
      "jsonschema.DurationOption": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "jsonschema.Permission": {
        "properties": {
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "resource"
        ]
      },
      "jsonschema.Pivot": {
        "properties": {
          "caseSensitive": {
            "type": "boolean"
          },
          "entity": {
            "type": "string"
          },
          "entityOnLoad": {
            "type": "string"
          },
          "entityValue": {
            "type": "string"
          },
          "queryString": {
            "type": "string"
          },
          "queryStringOnLoad": {
            "type": "string"
          },
          "searchable": {
            "type": "boolean"
          },
          "sortByDisplay": {
            "type": "boolean"
          },
          "sortByValue": {
            "type": "boolean"
          },
          "sortDesc": {
            "type": "boolean"
          },
          "strict": {
            "type": "boolean"
          }
        }
      },
      "jsonschema.ResetFields": {
        "properties": {
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ]
      },
      "jsonschema.Schema": {
        "properties": {
          "SubSchema": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "definitions": {
            "type": "object"
          }
        },
        "required": [
          "SubSchema"
        ]
      },
      "jsonschema.SignalsExtensions": {
        "properties": {
          "enum_wrapper": {
            "type": "boolean"
          },
          "example_display_map": {
            "type": "object"
          },
          "path_name": {
            "type": "string"
          },
          "use_case": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          }
        }
      },
      "jsonschema.SubSchema": {
        "properties": {
          "$ref": {
            "type": "string"
          },
          "$schema": {
            "type": "string"
          },
          "additionalItems": {
            "type": "string"
          },
          "additionalProperties": {
            "type": "string"
          },
          "allOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "anyOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "binaryEncoding": {
            "type": "string"
          },
          "const": {
            "$ref": "#/components/schemas/jsonschema.SubSchema.const"
          },
          "default": {
            "$ref": "#/components/schemas/jsonschema.SubSchema.default"
          },
          "dependencies": {
            "type": "object"
          },
          "deprecated": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "else": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "enum": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema.enum"
            },
            "type": "array"
          },
          "errorMessage": {
            "type": "string"
          },
          "examples": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema.examples"
            },
            "type": "array"
          },
          "exclusiveMaximum": {
            "type": "boolean"
          },
          "exclusiveMinimum": {
            "type": "boolean"
          },
          "format": {
            "type": "string"
          },
          "if": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "items": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "maxItems": {
            "format": "int32",
            "type": "integer"
          },
          "maxLength": {
            "format": "int32",
            "type": "integer"
          },
          "maxProperties": {
            "format": "int32",
            "type": "integer"
          },
          "maximum": {
            "format": "int32",
            "type": "integer"
          },
          "media": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "minItems": {
            "format": "int32",
            "type": "integer"
          },
          "minLength": {
            "format": "int32",
            "type": "integer"
          },
          "minProperties": {
            "format": "int32",
            "type": "integer"
          },
          "minimum": {
            "format": "int32",
            "type": "integer"
          },
          "multipleOf": {
            "format": "int32",
            "type": "integer"
          },
          "not": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "oneOf": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.SubSchema"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          },
          "patternProperties": {
            "type": "object"
          },
          "properties": {
            "type": "object"
          },
          "required": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "then": {
            "$ref": "#/components/schemas/jsonschema.SubSchema"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "ui:component": {
            "type": "string"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "x-cs-authorization": {
            "$ref": "#/components/schemas/jsonschema.Authorization"
          },
          "x-cs-can-create": {
            "type": "boolean"
          },
          "x-cs-condition-group-fields": {
            "$ref": "#/components/schemas/jsonschema.ConditionGroupFields"
          },
          "x-cs-do-not-hide": {
            "type": "boolean"
          },
          "x-cs-immutable": {
            "type": "boolean"
          },
          "x-cs-indexable": {
            "type": "boolean"
          },
          "x-cs-indexable-fields": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.CollectionIndexField"
            },
            "type": "array"
          },
          "x-cs-max-duration": {
            "format": "int32",
            "type": "integer"
          },
          "x-cs-min-duration": {
            "format": "int32",
            "type": "integer"
          },
          "x-cs-not-parameterizable": {
            "type": "boolean"
          },
          "x-cs-order": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-pivot": {
            "$ref": "#/components/schemas/jsonschema.Pivot"
          },
          "x-cs-signals": {
            "$ref": "#/components/schemas/jsonschema.SignalsExtensions"
          },
          "x-cs-signals-category": {
            "type": "string"
          },
          "x-cs-signals-operators": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-signals-subCategory": {
            "type": "string"
          },
          "x-cs-tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-ui": {
            "$ref": "#/components/schemas/jsonschema.UIExtensions"
          },
          "x-cs-workflow": {
            "$ref": "#/components/schemas/jsonschema.WorkflowExtensions"
          }
        }
      },
      "jsonschema.SubSchema.const": {},
      "jsonschema.SubSchema.default": {},
      "jsonschema.SubSchema.enum": {},
      "jsonschema.SubSchema.examples": {},
      "jsonschema.UIExtensions": {
        "properties": {
          "accept": {
            "description": "supported file extensions for file upload, eg. '.yaml', '.json'",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "component": {
            "type": "string"
          },
          "customGroupName": {
            "type": "string"
          },
          "durationOptions": {
            "items": {
              "$ref": "#/components/schemas/jsonschema.DurationOption"
            },
            "type": "array"
          },
          "encoding": {
            "description": "supported encoding for file upload, eg. 'base64'",
            "type": "string"
          },
          "helperText": {
            "type": "string"
          },
          "hide": {
            "description": "generate a hidden card during mobiledoc generation",
            "type": "boolean"
          },
          "schema_reference": {
            "description": "local reference to look up the dynamic json schema and mobiledoc card configuration returned in the top-level of api response",
            "type": "string"
          },
          "skip": {
            "description": "skip generating a card during mobiledoc generation",
            "type": "boolean"
          },
          "step": {
            "description": "decimal step to increment float values",
            "format": "double",
            "type": "number"
          }
        }
      },
      "jsonschema.WorkflowExtensions": {
        "properties": {
          "description": {
            "type": "string"
          },
          "max_file_size": {
            "description": "max file size allowed in bytes",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x-cs-no-variable-injection": {
            "type": "boolean"
          }
        }
      },
      "messages.Activity": {
        "properties": {
          "body": {
            "type": "string"
          },
          "case_id": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/messages.Author"
          },
          "created_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_modified_time": {
            "type": "string"
          },
          "modified_by": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "body",
          "case_id",
          "cid",
          "created_by",
          "created_time",
          "id",
          "type"
        ]
      },
      "messages.Alert": {
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "product",
          "url"
        ]
      },
      "messages.Attachment": {
        "properties": {
          "created_by": {
            "type": "string"
          },
          "created_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mime_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "created_by",
          "created_time",
          "id",
          "mime_type",
          "name",
          "size"
        ]
      },
      "messages.Author": {
        "properties": {
          "display_name": {
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "display_name",
          "first_name",
          "last_name",
          "uid",
          "uuid"
        ]
      },
      "messages.Case": {
        "properties": {
          "aids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "assigner": {
            "$ref": "#/components/schemas/messages.Author"
          },
          "attachments": {
            "items": {
              "$ref": "#/components/schemas/messages.Attachment"
            },
            "type": "array"
          },
          "body": {
            "type": "string"
          },
          "cid": {
            "type": "string"
          },
          "created_time": {
            "type": "string"
          },
          "detections": {
            "items": {
              "$ref": "#/components/schemas/messages.Detection"
            },
            "type": "array"
          },
          "hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "incidents": {
            "items": {
              "$ref": "#/components/schemas/messages.Incident"
            },
            "type": "array"
          },
          "ip_addresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "key": {
            "type": "string"
          },
          "last_modified_time": {
            "type": "string"
          },
          "malware_submission_id": {
            "type": "string"
          },
          "malware_submission_url": {
            "type": "string"
          },
          "recon_rule_type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "aids",
          "assigner",
          "attachments",
          "body",
          "cid",
          "created_time",
          "detections",
          "hosts",
          "id",
          "incidents",
          "ip_addresses",
          "key",
          "last_modified_time",
          "malware_submission_id",
          "malware_submission_url",
          "recon_rule_type",
          "status",
          "title",
          "type"
        ]
      },
      "messages.Detection": {
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "messages.Incident": {
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "model.Argument": {
        "properties": {
          "arg_name": {
            "type": "string"
          },
          "arg_type": {
            "type": "string"
          },
          "command_level": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "data_type": {
            "type": "string"
          },
          "default_value": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "id": {
            "format": "integer",
            "type": "integer"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required": {
            "type": "boolean"
          },
          "requires_value": {
            "type": "boolean"
          },
          "script_id": {
            "format": "integer",
            "type": "integer"
          },
          "sequence": {
            "format": "integer",
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "arg_name",
          "arg_type",
          "command_level",
          "created_at",
          "data_type",
          "default_value",
          "description",
          "encoding",
          "id",
          "options",
          "required",
          "requires_value",
          "script_id",
          "sequence",
          "updated_at"
        ]
      },
      "msa.APIError": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "msa.AffectedEntity": {
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "path"
        ]
      },
      "msa.AggregateQueryRequest": {
        "properties": {
          "date_ranges": {
            "items": {
              "$ref": "#/components/schemas/msa.DateRangeSpec"
            },
            "type": "array"
          },
          "exclude": {
            "type": "string"
          },
          "extended_bounds": {
            "$ref": "#/components/schemas/msa.ExtendedBoundsSpec"
          },
          "field": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "from": {
            "format": "int32",
            "type": "integer"
          },
          "include": {
            "type": "string"
          },
          "interval": {
            "type": "string"
          },
          "max_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "min_doc_count": {
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "q": {
            "type": "string"
          },
          "ranges": {
            "items": {
              "$ref": "#/components/schemas/msa.RangeSpec"
            },
            "type": "array"
          },
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "sort": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregateQueryRequest"
            },
            "type": "array"
          },
          "time_zone": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "date_ranges",
          "exclude",
          "field",
          "filter",
          "from",
          "include",
          "interval",
          "missing",
          "name",
          "q",
          "ranges",
          "size",
          "sort",
          "sub_aggregates",
          "time_zone",
          "type"
        ]
      },
      "msa.AggregatesResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResult"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "msa.AggregationResult": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResultItem"
            },
            "type": "array"
          },
          "doc_count_error_upper_bound": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "sum_other_doc_count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "buckets",
          "name"
        ]
      },
      "msa.AggregationResultItem": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "from": {
            "format": "double",
            "type": "number"
          },
          "key_as_string": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/msa.AggregationResultItem.label"
          },
          "string_from": {
            "type": "string"
          },
          "string_to": {
            "type": "string"
          },
          "sub_aggregates": {
            "items": {
              "$ref": "#/components/schemas/msa.AggregationResult"
            },
            "type": "array"
          },
          "to": {
            "format": "double",
            "type": "number"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "value_as_string": {
            "type": "string"
          }
        },
        "required": [
          "count"
        ]
      },
      "msa.AggregationResultItem.label": {},
      "msa.DateRangeSpec": {
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "msa.ExtendedBoundsSpec": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          }
        },
        "required": [
          "max",
          "min"
        ]
      },
      "msa.Facet": {
        "properties": {
          "by": {
            "items": {
              "$ref": "#/components/schemas/msa.Facet"
            },
            "type": "array"
          },
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "facet": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "term": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "term"
        ]
      },
      "msa.IdsRequest": {
        "properties": {
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ]
      },
      "msa.MetaInfo": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/msa.Paging"
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "$ref": "#/components/schemas/msa.Resources"
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "msa.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "total"
        ]
      },
      "msa.RangeSpec": {
        "properties": {
          "From": {
            "format": "double",
            "type": "number"
          },
          "To": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "From",
          "To"
        ]
      },
      "msa.ReplyAffectedEntities": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "$ref": "#/components/schemas/msa.AffectedEntity"
            },
            "type": "array"
          }
        },
        "required": [
          "errors",
          "meta",
          "resources"
        ]
      },
      "msa.ReplyMetaOnly": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msa.APIError"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msa.MetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "msa.Resources": {
        "properties": {
          "resources_affected": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "resources_affected"
        ]
      },
      "msaspec.ActionParameter": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "msaspec.Error": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "msaspec.MetaInfo": {
        "properties": {
          "pagination": {
            "properties": {
              "limit": {
                "format": "int32",
                "type": "integer"
              },
              "offset": {
                "format": "int32",
                "type": "integer"
              },
              "total": {
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "limit",
              "offset",
              "total"
            ]
          },
          "powered_by": {
            "type": "string"
          },
          "query_time": {
            "format": "double",
            "type": "number"
          },
          "trace_id": {
            "type": "string"
          },
          "writes": {
            "properties": {
              "resources_affected": {
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "resources_affected"
            ]
          }
        },
        "required": [
          "query_time",
          "trace_id"
        ]
      },
      "msaspec.Paging": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "total"
        ]
      },
      "msaspec.QueryResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          },
          "resources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "meta",
          "resources"
        ]
      },
      "msaspec.ResponseFields": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/msaspec.Error"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/msaspec.MetaInfo"
          }
        },
        "required": [
          "meta"
        ]
      },
      "msaspec.Writes": {
        "properties": {
          "resources_affected": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "resources_affected"
        ]
      },
      "triggers.TriggerExtField": {
        "properties": {
          "description": {
            "description": "Description for the field.",
            "type": "string"
          },
          "display": {
            "description": "User friendly display name for the field",
            "type": "string"
          },
          "example": {
            "$ref": "#/components/schemas/triggers.TriggerExtField.example"
          },
          "fields": {
            "description": "Nested fields of this object, only set when field type is complex",
            "items": {
              "$ref": "#/components/schemas/triggers.TriggerExtField"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the field as it should be passed back to the API through conditions or data mapping.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/fielddata.FieldSource"
          },
          "type": {
            "description": "Underlying type for the field, can be a primitive json schema type or signal field type.",
            "type": "string"
          }
        },
        "required": [
          "display",
          "name"
        ]
      },
      "triggers.TriggerExtField.example": {},
      "types.GroupInHierarchy": {
        "properties": {
          "children": {
            "items": {
              "$ref": "#/components/schemas/types.GroupInHierarchy"
            },
            "type": "array"
          },
          "createdBy": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "groupId": {
            "format": "int64",
            "type": "integer"
          },
          "groupType": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isOOB": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        }
      },
      "types.GroupMinDetailsWithParent": {
        "properties": {
          "groupId": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/types.GroupMinDetailsWithParent"
          }
        }
      },
      "types.UserGroup": {
        "properties": {
          "createdBy": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "groupId": {
            "format": "int64",
            "type": "integer"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isInternal": {
            "type": "boolean"
          },
          "isOOB": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/types.UserGroup"
          },
          "scope": {
            "type": "string"
          }
        },
        "required": [
          "createdBy",
          "description",
          "groupId",
          "isDefault",
          "isInternal",
          "isOOB",
          "name",
          "parent",
          "scope"
        ]
      },
      "v2.Activity": {
        "properties": {
          "class": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inline_configuration": {
            "$ref": "#/components/schemas/v2.InlineConfig"
          },
          "name": {
            "description": "Optional user provided name for the activity, if not specified a default of the name for that activity will be used.",
            "type": "string"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "properties"
        ]
      },
      "v2.Condition": {
        "properties": {
          "cel_expression": {
            "type": "string"
          },
          "display": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "else": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "else_if": {
            "type": "string"
          },
          "expression": {
            "type": "string"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "next"
        ]
      },
      "v2.ForLoop": {
        "properties": {
          "cel_condition": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "condition_display": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "continue_on_partial_execution": {
            "type": "boolean"
          },
          "input": {
            "type": "string"
          },
          "max_execution_seconds": {
            "format": "int32",
            "type": "integer"
          },
          "max_iteration_count": {
            "format": "int32",
            "type": "integer"
          },
          "sequential": {
            "type": "boolean"
          }
        },
        "required": [
          "continue_on_partial_execution",
          "input"
        ]
      },
      "v2.InlineConfig": {
        "properties": {
          "config": {
            "type": "object"
          },
          "input_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "output_schema": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          }
        }
      },
      "v2.Loop": {
        "properties": {
          "actions": {
            "type": "object"
          },
          "conditions": {
            "type": "object"
          },
          "display": {
            "type": "string"
          },
          "for": {
            "$ref": "#/components/schemas/v2.ForLoop"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/v2.Trigger"
          }
        },
        "required": [
          "for"
        ]
      },
      "v2.Model": {
        "properties": {
          "actions": {
            "type": "object"
          },
          "conditions": {
            "type": "object"
          },
          "loops": {
            "type": "object"
          },
          "nodeRegistry": {
            "type": "object"
          },
          "output_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parent": {
            "$ref": "#/components/schemas/v2.Model"
          },
          "summary": {
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/v2.Trigger"
          },
          "uniqNodeSeen": {
            "type": "object"
          }
        },
        "required": [
          "nodeRegistry",
          "parent",
          "trigger",
          "uniqNodeSeen"
        ]
      },
      "v2.Trigger": {
        "properties": {
          "event": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "next": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parameters": {
            "$ref": "#/components/schemas/jsonschema.Schema"
          },
          "schedule": {
            "$ref": "#/components/schemas/graph.TimerEventDefinition"
          },
          "type": {
            "type": "string"
          },
          "webhook_config": {
            "$ref": "#/components/schemas/webhooktrigger.APIRequest"
          }
        },
        "required": [
          "next"
        ]
      },
      "webhooktrigger.APIKeyConfig": {
        "properties": {
          "api_key": {
            "description": "API key for this trigger",
            "type": "string"
          },
          "body_location": {
            "description": "Location of the body containing the API key",
            "type": "string"
          },
          "header_name": {
            "description": "Name of the header containing the API key",
            "type": "string"
          }
        }
      },
      "webhooktrigger.APIRequest": {
        "properties": {
          "auth_config": {
            "$ref": "#/components/schemas/webhooktrigger.AuthConfig"
          },
          "change_log": {
            "description": "An optional change log describing the changes made in the update",
            "type": "string"
          },
          "description": {
            "description": "Description for the trigger.",
            "type": "string"
          },
          "name": {
            "description": "User friendly display name for the webhook trigger, this the fully qualified name that provides the context hierarchy.",
            "type": "string"
          },
          "response_config": {
            "$ref": "#/components/schemas/webhooktrigger.ResponseConfig"
          },
          "webhook_schema": {
            "description": "JSON schema of fields in the output of this trigger",
            "type": "object"
          }
        },
        "required": [
          "name"
        ]
      },
      "webhooktrigger.AuthConfig": {
        "properties": {
          "api_key_config": {
            "$ref": "#/components/schemas/webhooktrigger.APIKeyConfig"
          },
          "auth_type": {
            "description": "The type of authentication to use for the webhook trigger",
            "type": "string"
          },
          "basic_auth_config": {
            "$ref": "#/components/schemas/webhooktrigger.BasicAuthConfig"
          },
          "hmac_config": {
            "$ref": "#/components/schemas/webhooktrigger.HMACConfig"
          }
        },
        "required": [
          "auth_type"
        ]
      },
      "webhooktrigger.BasicAuthConfig": {
        "properties": {
          "password": {
            "description": "Password for basic authentication",
            "type": "string"
          },
          "username": {
            "description": "Username for basic authentication",
            "type": "string"
          }
        }
      },
      "webhooktrigger.HMACConfig": {
        "properties": {
          "field_delimiter": {
            "description": "Delimiter for fields in HMAC calculation (dot|comma)",
            "type": "string"
          },
          "fields": {
            "description": "Request components to include in HMAC calculation (body|timestamp|message_id)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hash_function": {
            "description": "Hash function to use for HMAC (e.g., sha256)",
            "type": "string"
          },
          "message_id_header_name": {
            "description": "Name of the header containing the webhook message ID",
            "type": "string"
          },
          "secret": {
            "description": "Secret key for HMAC signing",
            "type": "string"
          },
          "signature_encoding": {
            "description": "Encoding format for the signature",
            "type": "string"
          },
          "signature_header_name": {
            "description": "Name of the header containing the HMAC signature",
            "type": "string"
          },
          "signature_prefix": {
            "description": "Prefix of the HMAC signature which defines the signature format",
            "type": "string"
          },
          "timestamp_header_name": {
            "description": "Name of the header containing the timestamp",
            "type": "string"
          }
        }
      },
      "webhooktrigger.ResponseConfig": {
        "properties": {
          "body_content": {
            "description": "json content of webhook response body",
            "type": "string"
          },
          "status_code": {
            "description": "http response code for webhook response",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "status_code"
        ]
      }
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "clientCredentials": {
            "scopes": {
              "alerts:read": "Grants read access on alerts resources",
              "alerts:write": "Grants write access on alerts resources",
              "message-center:read": "Grants read access on message-center resources",
              "message-center:write": "Grants write access on message-center resources"
            },
            "tokenUrl": "/oauth2/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "email": "javier.carrasco@crowdstrike.com"
    },
    "description": "Crowdstrike alerts and message-center APIs.",
    "title": "Crowdstrike alerts and message-center",
    "version": ""
  },
  "openapi": "3.0.3",
  "paths": {
    "/alerts/aggregates/alerts/v1": {
      "post": {
        "operationId": "PostAggregatesAlertsV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/detectsapi.AggregateAlertQueryRequest"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AggregatesResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AggregatesResponse"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AggregatesResponse"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/aggregates/alerts/v2": {
      "post": {
        "operationId": "PostAggregatesAlertsV2",
        "parameters": [
          {
            "description": "allows previously hidden alerts to be retrieved",
            "in": "query",
            "name": "include_hidden",
            "schema": {
              "default": true,
              "description": "allows previously hidden alerts to be retrieved",
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/detectsapi.AggregateAlertQueryRequest"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AggregatesResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AggregatesResponse"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AggregatesResponse"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/combined/alerts/v1": {
      "post": {
        "operationId": "PostCombinedAlertsV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1RequestSwagger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1ResponseSwagger"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1ResponseSwagger"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostCombinedAlertsV1ResponseSwagger"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/entities/alerts/v1": {
      "post": {
        "operationId": "PostEntitiesAlertsV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detectsapi.PostEntitiesAlertsV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostEntitiesAlertsV1ResponseSwagger"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostEntitiesAlertsV1ResponseSwagger"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostEntitiesAlertsV1ResponseSwagger"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/entities/alerts/v2": {
      "patch": {
        "operationId": "PatchEntitiesAlertsV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detectsapi.PatchEntitiesAlertsV2Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.ResponseFields"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "PostEntitiesAlertsV2",
        "parameters": [
          {
            "description": "allows previously hidden alerts to be retrieved",
            "in": "query",
            "name": "include_hidden",
            "schema": {
              "default": true,
              "description": "allows previously hidden alerts to be retrieved",
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detectsapi.PostEntitiesAlertsV2Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "This generated schema may need tweaking. In particular format fields are attempts at matching workflow field types but may not be correct.",
                  "properties": {
                    "meta": {
                      "properties": {
                        "powered_by": {
                          "type": "string"
                        },
                        "query_time": {
                          "type": "number"
                        },
                        "trace_id": {
                          "type": "string"
                        },
                        "writes": {
                          "properties": {
                            "resources_affected": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "resources": {
                      "items": {
                        "properties": {
                          "agent_id": {
                            "type": "string"
                          },
                          "aggregate_id": {
                            "type": "string"
                          },
                          "cid": {
                            "type": "string"
                          },
                          "composite_id": {
                            "type": "string"
                          },
                          "correlation_rule_execution_id": {
                            "type": "string"
                          },
                          "correlation_rule_id": {
                            "type": "string"
                          },
                          "correlation_rule_user_id": {
                            "format": "email",
                            "type": "string"
                          },
                          "correlation_rule_user_uuid": {
                            "type": "string"
                          },
                          "crawled_timestamp": {
                            "type": "string"
                          },
                          "created_timestamp": {
                            "type": "string"
                          },
                          "data_domains": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": {
                            "type": "string"
                          },
                          "detection_id": {
                            "type": "string"
                          },
                          "display_name": {
                            "type": "string"
                          },
                          "end_time": {
                            "type": "string"
                          },
                          "enriched_entities": {
                            "type": "object"
                          },
                          "event_ids": {
                            "type": "string"
                          },
                          "falcon_host_link": {
                            "format": "url",
                            "type": "string"
                          },
                          "has_truncated_entities": {
                            "type": "boolean"
                          },
                          "host_names": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "id": {
                            "type": "string"
                          },
                          "mitre_attack": {
                            "items": {},
                            "type": "array"
                          },
                          "name": {
                            "type": "string"
                          },
                          "original_correlation_rules_entities_count": {
                            "type": "integer"
                          },
                          "original_indicator_entities_count": {
                            "type": "integer"
                          },
                          "pattern_id": {
                            "type": "integer"
                          },
                          "poly_id": {
                            "type": "string"
                          },
                          "product": {
                            "type": "string"
                          },
                          "seconds_to_resolved": {
                            "type": "integer"
                          },
                          "seconds_to_triaged": {
                            "type": "integer"
                          },
                          "severity": {
                            "type": "integer"
                          },
                          "severity_name": {
                            "type": "string"
                          },
                          "show_in_ui": {
                            "type": "boolean"
                          },
                          "source_products": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "source_vendors": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "start_time": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "timestamp": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "updated_timestamp": {
                            "type": "string"
                          },
                          "users": {
                            "items": {
                              "properties": {
                                "aid": {
                                  "type": "string"
                                },
                                "full_name": {
                                  "type": "string"
                                },
                                "full_name_is_enriched": {
                                  "type": "boolean"
                                },
                                "idp_id": {
                                  "type": "string"
                                },
                                "idp_id_is_enriched": {
                                  "type": "boolean"
                                },
                                "sid": {
                                  "type": "string"
                                },
                                "user_name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "vendor_pattern_id": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostEntitiesAlertsV2ResponseSwagger"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.PostEntitiesAlertsV2ResponseSwagger"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/entities/alerts/v3": {
      "patch": {
        "operationId": "PatchEntitiesAlertsV3",
        "parameters": [
          {
            "description": "allows previously hidden alerts to be retrieved",
            "in": "query",
            "name": "include_hidden",
            "schema": {
              "default": true,
              "description": "allows previously hidden alerts to be retrieved",
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detectsapi.PatchEntitiesAlertsV3Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.ResponseFields"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/queries/alerts/v1": {
      "get": {
        "operationId": "GetQueriesAlertsV1",
        "parameters": [
          {
            "description": "Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert \nAn asterisk wildcard `*` includes all results.  \nEmpty value means to not filter on anything.\nMost commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ...\nMost commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ...\nMost commonly filter fields that supports range comparisons (\u003e, \u003c, \u003e=, \u003c=): severity, created_timestamp, timestamp, updated_timestamp...\nAll filter fields and operations support negation (!).\n\n\nThe full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).",
            "in": "query",
            "name": "filter",
            "schema": {
              "description": "Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert \nAn asterisk wildcard `*` includes all results.  \nEmpty value means to not filter on anything.\nMost commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ...\nMost commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ...\nMost commonly filter fields that supports range comparisons (\u003e, \u003c, \u003e=, \u003c=): severity, created_timestamp, timestamp, updated_timestamp...\nAll filter fields and operations support negation (!).\n\n\nThe full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).",
              "type": "string"
            }
          },
          {
            "description": "The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the `offset` parameter to manage pagination of the results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the `offset` parameter to manage pagination of the results.",
              "maximum": 10000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "The first detection to return, where `0` is the latest detection. Use with the `offset` parameter to manage pagination of results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The first detection to return, where `0` is the latest detection. Use with the `offset` parameter to manage pagination of results.",
              "type": "integer"
            }
          },
          {
            "description": "Search all alert metadata for the provided string",
            "in": "query",
            "name": "q",
            "schema": {
              "description": "Search all alert metadata for the provided string",
              "type": "string"
            }
          },
          {
            "description": "Sort parameter takes the form \u003cfield|direction\u003e. Direction can be either `asc` (ascending) or `desc` (descending) order. For example: `status|asc` or `status|desc`.\n\nThe sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags\nIf the fields are missing from the Alerts, the service will fallback to its default ordering ",
            "in": "query",
            "name": "sort",
            "schema": {
              "description": "Sort parameter takes the form \u003cfield|direction\u003e. Direction can be either `asc` (ascending) or `desc` (descending) order. For example: `status|asc` or `status|desc`.\n\nThe sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags\nIf the fields are missing from the Alerts, the service will fallback to its default ordering ",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AlertQueryResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AlertQueryResponse"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AlertQueryResponse"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/queries/alerts/v2": {
      "get": {
        "operationId": "GetQueriesAlertsV2",
        "parameters": [
          {
            "description": "Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert \nAn asterisk wildcard `*` includes all results.  \nEmpty value means to not filter on anything.\nMost commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ...\nMost commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ...\nMost commonly filter fields that supports range comparisons (\u003e, \u003c, \u003e=, \u003c=): severity, created_timestamp, timestamp, updated_timestamp...\nAll filter fields and operations support negation (!).\n\n\nThe full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).",
            "in": "query",
            "name": "filter",
            "schema": {
              "description": "Filter Alerts using a query in Falcon Query Language (FQL).Filter fields can be any keyword field that is part of #domain.Alert \nAn asterisk wildcard `*` includes all results.  \nEmpty value means to not filter on anything.\nMost commonly used filter fields that supports exact match: cid, id, aggregate_id, product, type, pattern_id, platform ...\nMost commonly used filter fields that supports wildcard (*): assigned_to_name, assigned_to_uuid, tactic_id, technique ...\nMost commonly filter fields that supports range comparisons (\u003e, \u003c, \u003e=, \u003c=): severity, created_timestamp, timestamp, updated_timestamp...\nAll filter fields and operations support negation (!).\n\n\nThe full list of valid filter options is extensive. Review it in our [documentation inside the Falcon console](https://falcon.crowdstrike.com/documentation/45/falcon-query-language-fql).",
              "type": "string"
            }
          },
          {
            "description": "allows previously hidden alerts to be retrieved",
            "in": "query",
            "name": "include_hidden",
            "schema": {
              "default": true,
              "description": "allows previously hidden alerts to be retrieved",
              "type": "boolean"
            }
          },
          {
            "description": "The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the `offset` parameter to manage pagination of the results.",
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum number of detections to return in this response (default: 100; max: 10000). Use this parameter together with the `offset` parameter to manage pagination of the results.",
              "maximum": 10000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "The first detection to return, where `0` is the latest detection. Use with the `offset` parameter to manage pagination of results.",
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "The first detection to return, where `0` is the latest detection. Use with the `offset` parameter to manage pagination of results.",
              "type": "integer"
            }
          },
          {
            "description": "Search all alert metadata for the provided string",
            "in": "query",
            "name": "q",
            "schema": {
              "description": "Search all alert metadata for the provided string",
              "type": "string"
            }
          },
          {
            "description": "Sort parameter takes the form \u003cfield|direction\u003e. Direction can be either `asc` (ascending) or `desc` (descending) order. For example: `status|asc` or `status|desc`.\n\nThe sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags\nIf the fields are missing from the Alerts, the service will fallback to its default ordering ",
            "in": "query",
            "name": "sort",
            "schema": {
              "description": "Sort parameter takes the form \u003cfield|direction\u003e. Direction can be either `asc` (ascending) or `desc` (descending) order. For example: `status|asc` or `status|desc`.\n\nThe sorting fields can be any keyword field that is part of #domain.Alert except for the text based fields. Most commonly used fields are status, cid, aggregate_id, timestamp, created_timestamp, updated_timestamp, assigned_to_name, assigned_to_uid, assigned_to_uuid, show_in_ui, tactic_id, tactic, technique, technique_id, pattern_id, product, comment, tags\nIf the fields are missing from the Alerts, the service will fallback to its default ordering ",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AlertQueryResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AlertQueryResponse"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detectsapi.AlertQueryResponse"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/aggregates/cases/GET/v1": {
      "post": {
        "operationId": "AggregateCases",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/msa.AggregateQueryRequest"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.AggregatesResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Unexpected Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/entities/case-activities/GET/v1": {
      "post": {
        "operationId": "GetCaseActivityByIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/msa.IdsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.MessageCenterActivityResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/entities/case-activity/v1": {
      "post": {
        "operationId": "CaseAddActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domain.ActivityCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/entities/case-attachment/v1": {
      "get": {
        "operationId": "CaseDownloadAttachment",
        "parameters": [
          {
            "description": "attachment ID",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "description": "attachment ID",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/msword": {
                "schema": {
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "type": "string"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "type": "string"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "type": "string"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string"
                }
              },
              "image/bmp": {
                "schema": {
                  "type": "string"
                }
              },
              "image/gif": {
                "schema": {
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "string"
                }
              },
              "image/jpg": {
                "schema": {
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/msword": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/bmp": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/gif": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpeg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/png": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/msword": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/bmp": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/gif": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpeg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/png": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/msword": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/bmp": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/gif": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpeg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/png": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Not Found",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "application/msword": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "image/bmp": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "image/gif": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "image/jpeg": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "image/jpg": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "image/png": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/msword": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/bmp": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/gif": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpeg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/jpg": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "image/png": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Upload an attachment for the case. Maximum upload size allowed is *15 MB*.\n\n Filename must start with *[a-zA-Z0-9_-]*. Allowed characters in file name are *[a-zA-Z0-9-_.\\s]*. \n\n Maximum file name is *255* characters \n\n\n\n Following attachment types are allowed: \n\n- png \n\n- bmp \n\n- jpg \n\n- jpeg \n\n- gif \n\n- pdf \n\n- doc \n\n- docx \n\n- xls \n\n- xlsx \n\n- pptx \n\n- txt \n\n- csv",
        "operationId": "CaseAddAttachment",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "case_id": {
                    "description": "Case ID",
                    "type": "string"
                  },
                  "file": {
                    "description": "File Body",
                    "format": "binary",
                    "type": "string"
                  },
                  "user_uuid": {
                    "description": "User UUID",
                    "type": "string"
                  }
                },
                "required": [
                  "case_id",
                  "user_uuid",
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.MessageCenterAttachmentUploadResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/entities/case/v2": {
      "post": {
        "operationId": "CreateCaseV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domain.CaseCreationRequestV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyAffectedEntities"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/entities/cases/GET/v1": {
      "post": {
        "operationId": "GetCaseEntitiesByIDs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/msa.IdsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.MessageCenterCasesResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/queries/case-activities/v1": {
      "get": {
        "operationId": "QueryActivityByCaseID",
        "parameters": [
          {
            "description": "Case ID",
            "in": "query",
            "name": "case_id",
            "required": true,
            "schema": {
              "description": "Case ID",
              "type": "string"
            }
          },
          {
            "description": "Optional filter and sort criteria in the form of an FQL query. Allowed filters are: \n\nactivity.created_time\nactivity.type",
            "in": "query",
            "name": "filter",
            "schema": {
              "description": "Optional filter and sort criteria in the form of an FQL query. Allowed filters are: \n\nactivity.created_time\nactivity.type",
              "type": "string"
            }
          },
          {
            "description": "The maximum records to return. [1-500]",
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum records to return. [1-500]",
              "type": "integer"
            }
          },
          {
            "description": "Starting index of overall result set from which to return ids.",
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "Starting index of overall result set from which to return ids.",
              "type": "string"
            }
          },
          {
            "description": "The property to sort on, followed by a dot (.), followed by the sort direction, either \"asc\" or \"desc\".",
            "in": "query",
            "name": "sort",
            "schema": {
              "description": "The property to sort on, followed by a dot (.), followed by the sort direction, either \"asc\" or \"desc\".",
              "enum": [
                "activity.type.asc",
                "activity.type.desc",
                "activity.created_time.asc",
                "activity.created_time.desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.QueryResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/message-center/queries/cases/v1": {
      "get": {
        "operationId": "QueryCasesIdsByFilter",
        "parameters": [
          {
            "description": "Optional filter and sort criteria in the form of an FQL query. Allowed filters are: \n\n_all\nactivity.body\ncase.aids\ncase.assigner.display_name\ncase.assigner.first_name\ncase.assigner.last_name\ncase.assigner.uid\ncase.assigner.uuid\ncase.body\ncase.created_time\ncase.detections.id\ncase.hosts\ncase.id\ncase.incidents.id\ncase.ip_addresses\ncase.key\ncase.last_modified_time\ncase.status\ncase.status\ncase.title\ncase.type",
            "in": "query",
            "name": "filter",
            "schema": {
              "description": "Optional filter and sort criteria in the form of an FQL query. Allowed filters are: \n\n_all\nactivity.body\ncase.aids\ncase.assigner.display_name\ncase.assigner.first_name\ncase.assigner.last_name\ncase.assigner.uid\ncase.assigner.uuid\ncase.body\ncase.created_time\ncase.detections.id\ncase.hosts\ncase.id\ncase.incidents.id\ncase.ip_addresses\ncase.key\ncase.last_modified_time\ncase.status\ncase.status\ncase.title\ncase.type",
              "type": "string"
            }
          },
          {
            "description": "The maximum records to return. [1-500]",
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "The maximum records to return. [1-500]",
              "type": "integer"
            }
          },
          {
            "description": "Starting index of overall result set from which to return ids.",
            "in": "query",
            "name": "offset",
            "schema": {
              "description": "Starting index of overall result set from which to return ids.",
              "type": "string"
            }
          },
          {
            "description": "The property to sort on, followed by a dot (.), followed by the sort direction, either \"asc\" or \"desc\".",
            "in": "query",
            "name": "sort",
            "schema": {
              "description": "The property to sort on, followed by a dot (.), followed by the sort direction, either \"asc\" or \"desc\".",
              "enum": [
                "case.created_time.asc",
                "case.created_time.desc",
                "case.last_modified_time.asc",
                "case.last_modified_time.desc",
                "case.status.asc",
                "case.status.desc",
                "case.type.asc",
                "case.type.desc",
                "case.id.asc",
                "case.id.desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.QueryResponse"
                }
              }
            },
            "description": "OK",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Bad Request",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Forbidden",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msa.ReplyMetaOnly"
                }
              }
            },
            "description": "Too Many Requests",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-RetryAfter": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/msaspec.ResponseFields"
                }
              }
            },
            "description": "Internal Server Error",
            "headers": {
              "X-CS-TRACEID": {
                "schema": {
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "servers": [
    {
      "url": "{baseURL}",
      "variables": {
        "host": {
          "description": "API baseUrl ({env}.{version}.crowdstrike.com)"
        }
      }
    }
  ],
  "x-cs-multi-instance": true
}